// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct UTXO {
    // message fields
    pub txid: ::std::vec::Vec<u8>,
    pub vout: u32,
    pub psbt_input: ::std::vec::Vec<u8>,
    pub block_number: u32,
    pub block_hash: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl UTXO {
    pub fn new() -> UTXO {
        ::std::default::Default::default()
    }

    // bytes txid = 1;

    pub fn clear_txid(&mut self) {
        self.txid.clear();
    }

    // Param is passed by value, moved
    pub fn set_txid(&mut self, v: ::std::vec::Vec<u8>) {
        self.txid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.txid
    }

    // Take field
    pub fn take_txid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.txid, ::std::vec::Vec::new())
    }

    pub fn get_txid(&self) -> &[u8] {
        &self.txid
    }

    // uint32 vout = 2;

    pub fn clear_vout(&mut self) {
        self.vout = 0;
    }

    // Param is passed by value, moved
    pub fn set_vout(&mut self, v: u32) {
        self.vout = v;
    }

    pub fn get_vout(&self) -> u32 {
        self.vout
    }

    // bytes psbt_input = 3;

    pub fn clear_psbt_input(&mut self) {
        self.psbt_input.clear();
    }

    // Param is passed by value, moved
    pub fn set_psbt_input(&mut self, v: ::std::vec::Vec<u8>) {
        self.psbt_input = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_psbt_input(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.psbt_input
    }

    // Take field
    pub fn take_psbt_input(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.psbt_input, ::std::vec::Vec::new())
    }

    pub fn get_psbt_input(&self) -> &[u8] {
        &self.psbt_input
    }

    // uint32 block_number = 4;

    pub fn clear_block_number(&mut self) {
        self.block_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_number(&mut self, v: u32) {
        self.block_number = v;
    }

    pub fn get_block_number(&self) -> u32 {
        self.block_number
    }

    // bytes block_hash = 5;

    pub fn clear_block_hash(&mut self) {
        self.block_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_hash
    }

    // Take field
    pub fn take_block_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_hash, ::std::vec::Vec::new())
    }

    pub fn get_block_hash(&self) -> &[u8] {
        &self.block_hash
    }
}

impl ::protobuf::Message for UTXO {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.txid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.vout = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.psbt_input)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.block_number = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.txid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.txid);
        }
        if self.vout != 0 {
            my_size += ::protobuf::rt::value_size(2, self.vout, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.psbt_input.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.psbt_input);
        }
        if self.block_number != 0 {
            my_size += ::protobuf::rt::value_size(4, self.block_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.block_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.block_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.txid.is_empty() {
            os.write_bytes(1, &self.txid)?;
        }
        if self.vout != 0 {
            os.write_uint32(2, self.vout)?;
        }
        if !self.psbt_input.is_empty() {
            os.write_bytes(3, &self.psbt_input)?;
        }
        if self.block_number != 0 {
            os.write_uint32(4, self.block_number)?;
        }
        if !self.block_hash.is_empty() {
            os.write_bytes(5, &self.block_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UTXO {
        UTXO::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "txid",
                    |m: &UTXO| { &m.txid },
                    |m: &mut UTXO| { &mut m.txid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "vout",
                    |m: &UTXO| { &m.vout },
                    |m: &mut UTXO| { &mut m.vout },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "psbt_input",
                    |m: &UTXO| { &m.psbt_input },
                    |m: &mut UTXO| { &mut m.psbt_input },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "block_number",
                    |m: &UTXO| { &m.block_number },
                    |m: &mut UTXO| { &mut m.block_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "block_hash",
                    |m: &UTXO| { &m.block_hash },
                    |m: &mut UTXO| { &mut m.block_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UTXO>(
                    "UTXO",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UTXO {
        static mut instance: ::protobuf::lazy::Lazy<UTXO> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UTXO,
        };
        unsafe {
            instance.get(UTXO::new)
        }
    }
}

impl ::protobuf::Clear for UTXO {
    fn clear(&mut self) {
        self.clear_txid();
        self.clear_vout();
        self.clear_psbt_input();
        self.clear_block_number();
        self.clear_block_hash();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UTXO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UTXO {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Proof {
    // message fields
    pub id: ::std::string::String,
    pub status: Proof_Status,
    pub proof_tx: ::std::vec::Vec<u8>,
    pub utxos: ::protobuf::RepeatedField<UTXO>,
    pub psbt: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Proof {
    pub fn new() -> Proof {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // .Proof.Status status = 2;

    pub fn clear_status(&mut self) {
        self.status = Proof_Status::UNDEFINED;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Proof_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> Proof_Status {
        self.status
    }

    // bytes proof_tx = 3;

    pub fn clear_proof_tx(&mut self) {
        self.proof_tx.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_tx(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_tx = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_tx(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof_tx
    }

    // Take field
    pub fn take_proof_tx(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof_tx, ::std::vec::Vec::new())
    }

    pub fn get_proof_tx(&self) -> &[u8] {
        &self.proof_tx
    }

    // repeated .UTXO utxos = 4;

    pub fn clear_utxos(&mut self) {
        self.utxos.clear();
    }

    // Param is passed by value, moved
    pub fn set_utxos(&mut self, v: ::protobuf::RepeatedField<UTXO>) {
        self.utxos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_utxos(&mut self) -> &mut ::protobuf::RepeatedField<UTXO> {
        &mut self.utxos
    }

    // Take field
    pub fn take_utxos(&mut self) -> ::protobuf::RepeatedField<UTXO> {
        ::std::mem::replace(&mut self.utxos, ::protobuf::RepeatedField::new())
    }

    pub fn get_utxos(&self) -> &[UTXO] {
        &self.utxos
    }

    // bytes psbt = 5;

    pub fn clear_psbt(&mut self) {
        self.psbt.clear();
    }

    // Param is passed by value, moved
    pub fn set_psbt(&mut self, v: ::std::vec::Vec<u8>) {
        self.psbt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_psbt(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.psbt
    }

    // Take field
    pub fn take_psbt(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.psbt, ::std::vec::Vec::new())
    }

    pub fn get_psbt(&self) -> &[u8] {
        &self.psbt
    }
}

impl ::protobuf::Message for Proof {
    fn is_initialized(&self) -> bool {
        for v in &self.utxos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof_tx)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.utxos)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.psbt)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.status != Proof_Status::UNDEFINED {
            my_size += ::protobuf::rt::enum_size(2, self.status);
        }
        if !self.proof_tx.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.proof_tx);
        }
        for value in &self.utxos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.psbt.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.psbt);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.status != Proof_Status::UNDEFINED {
            os.write_enum(2, self.status.value())?;
        }
        if !self.proof_tx.is_empty() {
            os.write_bytes(3, &self.proof_tx)?;
        }
        for v in &self.utxos {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.psbt.is_empty() {
            os.write_bytes(5, &self.psbt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Proof {
        Proof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &Proof| { &m.id },
                    |m: &mut Proof| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Proof_Status>>(
                    "status",
                    |m: &Proof| { &m.status },
                    |m: &mut Proof| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "proof_tx",
                    |m: &Proof| { &m.proof_tx },
                    |m: &mut Proof| { &mut m.proof_tx },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UTXO>>(
                    "utxos",
                    |m: &Proof| { &m.utxos },
                    |m: &mut Proof| { &mut m.utxos },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "psbt",
                    |m: &Proof| { &m.psbt },
                    |m: &mut Proof| { &mut m.psbt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Proof>(
                    "Proof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Proof {
        static mut instance: ::protobuf::lazy::Lazy<Proof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Proof,
        };
        unsafe {
            instance.get(Proof::new)
        }
    }
}

impl ::protobuf::Clear for Proof {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_status();
        self.clear_proof_tx();
        self.clear_utxos();
        self.clear_psbt();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Proof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Proof_Status {
    UNDEFINED = 0,
    FINAL = 1,
    GATHERING_UTXOS = 2,
    SIGNING = 3,
}

impl ::protobuf::ProtobufEnum for Proof_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Proof_Status> {
        match value {
            0 => ::std::option::Option::Some(Proof_Status::UNDEFINED),
            1 => ::std::option::Option::Some(Proof_Status::FINAL),
            2 => ::std::option::Option::Some(Proof_Status::GATHERING_UTXOS),
            3 => ::std::option::Option::Some(Proof_Status::SIGNING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Proof_Status] = &[
            Proof_Status::UNDEFINED,
            Proof_Status::FINAL,
            Proof_Status::GATHERING_UTXOS,
            Proof_Status::SIGNING,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Proof_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Proof_Status {
}

impl ::std::default::Default for Proof_Status {
    fn default() -> Self {
        Proof_Status::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProofOfReserves {
    // message fields
    pub version: u32,
    pub network: Network,
    pub challenge: ::std::string::String,
    pub block_number: u32,
    pub proofs: ::protobuf::RepeatedField<Proof>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ProofOfReserves {
    pub fn new() -> ProofOfReserves {
        ::std::default::Default::default()
    }

    // uint32 version = 1;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    pub fn get_version(&self) -> u32 {
        self.version
    }

    // .Network network = 2;

    pub fn clear_network(&mut self) {
        self.network = Network::BITCOIN;
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: Network) {
        self.network = v;
    }

    pub fn get_network(&self) -> Network {
        self.network
    }

    // string challenge = 3;

    pub fn clear_challenge(&mut self) {
        self.challenge.clear();
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: ::std::string::String) {
        self.challenge = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge(&mut self) -> &mut ::std::string::String {
        &mut self.challenge
    }

    // Take field
    pub fn take_challenge(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.challenge, ::std::string::String::new())
    }

    pub fn get_challenge(&self) -> &str {
        &self.challenge
    }

    // uint32 block_number = 4;

    pub fn clear_block_number(&mut self) {
        self.block_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_number(&mut self, v: u32) {
        self.block_number = v;
    }

    pub fn get_block_number(&self) -> u32 {
        self.block_number
    }

    // repeated .Proof proofs = 5;

    pub fn clear_proofs(&mut self) {
        self.proofs.clear();
    }

    // Param is passed by value, moved
    pub fn set_proofs(&mut self, v: ::protobuf::RepeatedField<Proof>) {
        self.proofs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_proofs(&mut self) -> &mut ::protobuf::RepeatedField<Proof> {
        &mut self.proofs
    }

    // Take field
    pub fn take_proofs(&mut self) -> ::protobuf::RepeatedField<Proof> {
        ::std::mem::replace(&mut self.proofs, ::protobuf::RepeatedField::new())
    }

    pub fn get_proofs(&self) -> &[Proof] {
        &self.proofs
    }
}

impl ::protobuf::Message for ProofOfReserves {
    fn is_initialized(&self) -> bool {
        for v in &self.proofs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.network, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.challenge)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.block_number = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.proofs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network != Network::BITCOIN {
            my_size += ::protobuf::rt::enum_size(2, self.network);
        }
        if !self.challenge.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.challenge);
        }
        if self.block_number != 0 {
            my_size += ::protobuf::rt::value_size(4, self.block_number, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.proofs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.network != Network::BITCOIN {
            os.write_enum(2, self.network.value())?;
        }
        if !self.challenge.is_empty() {
            os.write_string(3, &self.challenge)?;
        }
        if self.block_number != 0 {
            os.write_uint32(4, self.block_number)?;
        }
        for v in &self.proofs {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProofOfReserves {
        ProofOfReserves::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &ProofOfReserves| { &m.version },
                    |m: &mut ProofOfReserves| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Network>>(
                    "network",
                    |m: &ProofOfReserves| { &m.network },
                    |m: &mut ProofOfReserves| { &mut m.network },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "challenge",
                    |m: &ProofOfReserves| { &m.challenge },
                    |m: &mut ProofOfReserves| { &mut m.challenge },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "block_number",
                    |m: &ProofOfReserves| { &m.block_number },
                    |m: &mut ProofOfReserves| { &mut m.block_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Proof>>(
                    "proofs",
                    |m: &ProofOfReserves| { &m.proofs },
                    |m: &mut ProofOfReserves| { &mut m.proofs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProofOfReserves>(
                    "ProofOfReserves",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProofOfReserves {
        static mut instance: ::protobuf::lazy::Lazy<ProofOfReserves> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProofOfReserves,
        };
        unsafe {
            instance.get(ProofOfReserves::new)
        }
    }
}

impl ::protobuf::Clear for ProofOfReserves {
    fn clear(&mut self) {
        self.clear_version();
        self.clear_network();
        self.clear_challenge();
        self.clear_block_number();
        self.clear_proofs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProofOfReserves {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProofOfReserves {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Network {
    BITCOIN = 0,
    LIQUID = 1,
}

impl ::protobuf::ProtobufEnum for Network {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Network> {
        match value {
            0 => ::std::option::Option::Some(Network::BITCOIN),
            1 => ::std::option::Option::Some(Network::LIQUID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Network] = &[
            Network::BITCOIN,
            Network::LIQUID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Network", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Network {
}

impl ::std::default::Default for Network {
    fn default() -> Self {
        Network::BITCOIN
    }
}

impl ::protobuf::reflect::ProtobufValue for Network {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15protos/reserves.proto\"\x8f\x01\n\x04UTXO\x12\x12\n\x04txid\x18\
    \x01\x20\x01(\x0cR\x04txid\x12\x12\n\x04vout\x18\x02\x20\x01(\rR\x04vout\
    \x12\x1d\n\npsbt_input\x18\x03\x20\x01(\x0cR\tpsbtInput\x12!\n\x0cblock_\
    number\x18\x04\x20\x01(\rR\x0bblockNumber\x12\x1d\n\nblock_hash\x18\x05\
    \x20\x01(\x0cR\tblockHash\"\xd0\x01\n\x05Proof\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\tR\x02id\x12%\n\x06status\x18\x02\x20\x01(\x0e2\r.Proof.Status\
    R\x06status\x12\x19\n\x08proof_tx\x18\x03\x20\x01(\x0cR\x07proofTx\x12\
    \x1b\n\x05utxos\x18\x04\x20\x03(\x0b2\x05.UTXOR\x05utxos\x12\x12\n\x04ps\
    bt\x18\x05\x20\x01(\x0cR\x04psbt\"D\n\x06Status\x12\r\n\tUNDEFINED\x10\0\
    \x12\t\n\x05FINAL\x10\x01\x12\x13\n\x0fGATHERING_UTXOS\x10\x02\x12\x0b\n\
    \x07SIGNING\x10\x03\"\xb0\x01\n\x0fProofOfReserves\x12\x18\n\x07version\
    \x18\x01\x20\x01(\rR\x07version\x12\"\n\x07network\x18\x02\x20\x01(\x0e2\
    \x08.NetworkR\x07network\x12\x1c\n\tchallenge\x18\x03\x20\x01(\tR\tchall\
    enge\x12!\n\x0cblock_number\x18\x04\x20\x01(\rR\x0bblockNumber\x12\x1e\n\
    \x06proofs\x18\x05\x20\x03(\x0b2\x06.ProofR\x06proofs*\"\n\x07Network\
    \x12\x0b\n\x07BITCOIN\x10\0\x12\n\n\x06LIQUID\x10\x01J\xc6\x11\n\x06\x12\
    \x04\0\0<\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x05\0\x12\x04\
    \x02\0\x05\x01\n\n\n\x03\x05\0\x01\x12\x03\x02\x05\x0c\n\x0b\n\x04\x05\0\
    \x02\0\x12\x03\x03\x08\x14\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x03\x08\
    \x0f\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x03\x12\x13\n\x0b\n\x04\x05\0\
    \x02\x01\x12\x03\x04\x08\x13\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x04\
    \x08\x0e\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x04\x11\x12\n\n\n\x02\x04\
    \0\x12\x04\x07\0\x16\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x0c\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x08\x08\x17\n\r\n\x05\x04\0\x02\0\x04\x12\x04\
    \x08\x08\x07\x0e\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x08\r\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x08\x0e\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x08\x15\x16\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x08\x18\n\r\n\x05\
    \x04\0\x02\x01\x04\x12\x04\t\x08\x08\x17\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\t\x08\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\x0f\x13\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\t\x16\x17\n\xc2\x01\n\x04\x04\0\x02\x02\
    \x12\x03\x0e\x08\x1d\x1a\xb4\x01\x20A\x20serialized\x20BIP-174\x20INPUT\
    \x20(not\x20a\x20full\x20PSBT).\n\x20To\x20make\x20use\x20of\x20the\x20e\
    xisting\x20PSBT\x20infrastructure\x20this\x20field\x20should\x20be\n\x20\
    filled\x20with\x20all\x20the\x20information\x20needed\x20to\x20sign\x20f\
    or\x20this\x20UTXO.\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x0e\x08\t\x18\
    \n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0e\x08\r\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x0e\x0e\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0e\
    \x1b\x1c\nt\n\x04\x04\0\x02\x03\x12\x03\x14\x08\x20\x1aS\x20Block\x20inf\
    ormation\x20to\x20speed\x20up\x20verification\x20for\x20nodes\x20that\
    \x20don't\x20have\x20a\x20\n\x20txindex.\n2\x12\x20Extra\x20meta-data.\n\
    \n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x14\x08\x0e\x1d\n\x0c\n\x05\x04\0\
    \x02\x03\x05\x12\x03\x14\x08\x0e\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\
    \x14\x0f\x1b\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x14\x1e\x1f\n\x0b\n\
    \x04\x04\0\x02\x04\x12\x03\x15\x08\x1d\n\r\n\x05\x04\0\x02\x04\x04\x12\
    \x04\x15\x08\x14\x20\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x15\x08\r\n\
    \x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x15\x0e\x18\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03\x15\x1b\x1c\n\n\n\x02\x04\x01\x12\x04\x18\01\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x18\x08\r\n\x0c\n\x04\x04\x01\x04\0\x12\x04\x19\
    \x08\x1e\t\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03\x19\r\x13\n\r\n\x06\x04\
    \x01\x04\0\x02\0\x12\x03\x1a\x10\x1e\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\
    \x12\x03\x1a\x10\x19\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03\x1a\x1c\
    \x1d\n\r\n\x06\x04\x01\x04\0\x02\x01\x12\x03\x1b\x10\x1a\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x01\x01\x12\x03\x1b\x10\x15\n\x0e\n\x07\x04\x01\x04\0\x02\
    \x01\x02\x12\x03\x1b\x18\x19\n\r\n\x06\x04\x01\x04\0\x02\x02\x12\x03\x1c\
    \x10$\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x03\x1c\x10\x1f\n\x0e\n\
    \x07\x04\x01\x04\0\x02\x02\x02\x12\x03\x1c\"#\n\r\n\x06\x04\x01\x04\0\
    \x02\x03\x12\x03\x1d\x10\x1c\n\x0e\n\x07\x04\x01\x04\0\x02\x03\x01\x12\
    \x03\x1d\x10\x17\n\x0e\n\x07\x04\x01\x04\0\x02\x03\x02\x12\x03\x1d\x1a\
    \x1b\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x20\x08\x16\n\r\n\x05\x04\x01\x02\
    \0\x04\x12\x04\x20\x08\x1e\t\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x20\
    \x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x20\x0f\x11\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x20\x14\x15\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03!\x08\x1a\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04!\x08\x20\x16\n\x0c\n\
    \x05\x04\x01\x02\x01\x06\x12\x03!\x08\x0e\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03!\x0f\x15\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03!\x18\x19\n\
    Q\n\x04\x04\x01\x02\x02\x12\x03%\x08\x1b\x1aD\x20Proof\x20tx\x20of\x20a\
    \x20final\x20proof.\n\x20Should\x20only\x20be\x20set\x20in\x20the\x20FIN\
    AL\x20state.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04%\x08!\x1a\n\x0c\n\
    \x05\x04\x01\x02\x02\x05\x12\x03%\x08\r\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03%\x0e\x16\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03%\x19\x1a\n\x9f\
    \x01\n\x04\x04\x01\x02\x03\x12\x03*\x08\x20\x1a\x91\x01\x20UTXOs\x20used\
    \x20in\x20this\x20proof.\x20\x20These\x20are\x20filled\x20when\x20gather\
    ing\x20UTXOs,\x20\n\x20used\x20to\x20help\x20signing\x20and\x20can\x20be\
    \x20kept\x20afterwards\x20to\x20speed\x20up\x20\n\x20verification.\n\n\
    \x0c\n\x05\x04\x01\x02\x03\x04\x12\x03*\x08\x10\n\x0c\n\x05\x04\x01\x02\
    \x03\x06\x12\x03*\x11\x15\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03*\x16\
    \x1b\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03*\x1e\x1f\n\xd6\x01\n\x04\
    \x04\x01\x02\x04\x12\x030\x08\x17\x1a\xc8\x01\x20When\x20gathering\x20si\
    gnatures,\x20use\x20the\x20BIP-174\x20PSBT\x20format\x20to\x20incrementa\
    lly\n\x20construct\x20the\x20fully\x20signed\x20transaction.\n\x20Once\
    \x20this\x20variable\x20is\x20no\x20longer\x20empty,\x20no\x20new\x20out\
    puts\x20should\x20be\x20added\n\x20to\x20the\x20proof.\n\n\r\n\x05\x04\
    \x01\x02\x04\x04\x12\x040\x08*\x20\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\
    \x030\x08\r\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x030\x0e\x12\n\x0c\n\x05\
    \x04\x01\x02\x04\x03\x12\x030\x15\x16\n\n\n\x02\x04\x02\x12\x043\0<\x01\
    \n\n\n\x03\x04\x02\x01\x12\x033\x08\x17\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x034\x08\x1b\n\r\n\x05\x04\x02\x02\0\x04\x12\x044\x083\x19\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x034\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x034\x0f\x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x034\x19\x1a\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x035\x08\x1c\n\r\n\x05\x04\x02\x02\x01\x04\x12\x045\
    \x084\x1b\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x035\x08\x0f\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x035\x10\x17\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x035\x1a\x1b\nU\n\x04\x04\x02\x02\x02\x12\x038\x08\x1d\x1aH\x20Both\
    \x20the\x20challenge\x20and\x20the\x20block\x20number\x20are\x20global\
    \x20for\x20all\x20the\x20proofs.\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\
    8\x085\x1c\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x038\x08\x0e\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x038\x0f\x18\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x038\x1b\x1c\n\x0b\n\x04\x04\x02\x02\x03\x12\x039\x08\x20\n\r\n\x05\
    \x04\x02\x02\x03\x04\x12\x049\x088\x1d\n\x0c\n\x05\x04\x02\x02\x03\x05\
    \x12\x039\x08\x0e\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x039\x0f\x1b\n\x0c\
    \n\x05\x04\x02\x02\x03\x03\x12\x039\x1e\x1f\n\x0b\n\x04\x04\x02\x02\x04\
    \x12\x03;\x08#\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03;\x08\x10\n\x0c\n\
    \x05\x04\x02\x02\x04\x06\x12\x03;\x11\x16\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x03;\x17\x1d\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03;!\"b\x06pr\
    oto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
